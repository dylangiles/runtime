/*
 * Copyright Â© 2022, The Elide Framework Authors. All rights reserved.
 *
 * The Gust/Elide framework and tools, and all associated source or object computer code, except where otherwise noted,
 * are licensed under the Zero Prosperity license, which is enclosed in this repository, in the file LICENSE.txt. Use of
 * this code in object or source form requires and implies consent and agreement to that license in principle and
 * practice. Source or object code not listing this header, or unless specified otherwise, remain the property of
 * Elide LLC and its suppliers, if any. The intellectual and technical concepts contained herein are proprietary to
 * Elide LLC and its suppliers and may be covered by U.S. and Foreign Patents, or patents in process, and are protected
 * by trade secret and copyright law. Dissemination of this information, or reproduction of this material, in any form,
 * is strictly forbidden except in adherence with assigned license requirements.
 */

/**
 * Coming soon.
 */
syntax = "proto3";

package elide.runtime.internal.info;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_string_check_utf8 = true;
option java_package = "elide.runtime.internal";


// # Runtime Configuration
//
// Specifies the structure expected by the Elide Runtime for configuration of a given guest language environment. These
// configuration structures describe pre-user-code execution steps to set up guest intrinsics and state. The runtime
// configuration is immutable and is injected into the Elide binary at build-time.
//
// ## Configuration Structure
//
// There are a handful of top-level configuration properties which drive guest runtimes:
//
// - `preamble`: Specifies a resource which should be executed within the guest VM prior to any other code. This code
//   fragment is expected to be implemented in a runtime-supported guest language.
//
message RuntimeConfig {

}

// # Runtime Info
//
// Coming soon.
//
// - `version`: The version of the embedded runtime config.
// - `lang`: The language of the embedded runtime config.
message RuntimeInfo {
  // Coming soon.
}
